from app.core.database import get_db
from app.dependencies.auth import recuperer_utilisateur_courant
from app.models.livraison import Livraison
from app.models.livreur import Livreur
from app.models.notification import TypeNotification
from app.schemas.marchand import MarchandCreate
from app.schemas.commande import CommandeRead
from app.models.marchand import Marchand
from app.models.commande import Commande, StatutCommande
from sqlalchemy.orm import Session
from fastapi import Depends, HTTPException
from uuid import UUID

from app.schemas.notification import NotificationCreate
from app.services.notification import creer_notification

def creer_marchand(db: Session, marchand_data: MarchandCreate):
    # V√©rifier si un marchand existe d√©j√† pour cet utilisateur
    # marchand_existant = db.query(Marchand).filter(Marchand.utilisateur_id == marchand_data.utilisateur_id).first()
    # if marchand_existant:
    #     raise HTTPException(status_code=400, detail="Ce compte a d√©j√† un marchand associ√©.")

    # Cr√©er le marchand
    nouveau_marchand = Marchand(
        nom=marchand_data.nom,
        contact=marchand_data.contact,
        adresse=marchand_data.adresse,
        utilisateur_id=marchand_data.utilisateur_id
    )
    db.add(nouveau_marchand)
    db.commit()
    db.refresh(nouveau_marchand)
    
    notif = NotificationCreate(
        user_id=nouveau_marchand.utilisateur_id,
        user_type="marchand",
        titre="Compte marchand cr√©√©",
        message="Votre profil marchand a √©t√© cr√©√© avec succ√®s.",
        type=TypeNotification.success
    )
    creer_notification(db, notif)
    return nouveau_marchand

def lister_marchands(db: Session):
    return db.query(Marchand).all()

def lister_marchands_par_utilisateur(db: Session, utilisateur_id: UUID):
    return db.query(Marchand).filter(Marchand.utilisateur_id == utilisateur_id).all()


def obtenir_marchand(db: Session, marchand_id: UUID):
    marchand = db.query(Marchand).filter(Marchand.id == marchand_id).first()
    if not marchand:
        raise HTTPException(status_code=404, detail="Marchand non trouv√©")
    return marchand


def modifier_marchand(db: Session, marchand_id: UUID, marchand_data: MarchandCreate):
    marchand = db.query(Marchand).filter(Marchand.id == marchand_id).first()
    if not marchand:
        raise HTTPException(status_code=404, detail="Marchand non trouv√©")

    marchand.nom = marchand_data.nom
    marchand.contact = marchand_data.contact
    marchand.adresse = marchand_data.adresse
    # On ne modifie pas l'utilisateur associ√© sauf besoin sp√©cifique
    db.commit()
    db.refresh(marchand)
    
    notif = NotificationCreate(
        user_id=marchand.utilisateur_id,
        user_type="marchand",
        titre="Informations modifi√©es",
        message="Vos informations ont √©t√© mises √† jour avec succ√®s.",
        type=TypeNotification.info
    )
    creer_notification(db, notif)
    return marchand

def supprimer_marchand(db: Session, marchand_id: UUID):
    marchand = db.query(Marchand).filter(Marchand.id == marchand_id).first()
    if not marchand:
        raise HTTPException(status_code=404, detail="Marchand non trouv√©")

    
    notif = NotificationCreate(
        user_id=marchand.utilisateur_id,
        user_type="marchand",
        titre="Compte supprim√©",
        message="Votre profil marchand a √©t√© supprim√©.",
        type=TypeNotification.warning
    )
    creer_notification(db, notif)
    db.delete(marchand)
    db.commit()
    return {"message": "Marchand supprim√© avec succ√®s"}


def obtenir_marchand_par_utilisateur(db: Session, utilisateur_id: UUID):
    return db.query(Marchand).filter(Marchand.utilisateur_id == utilisateur_id).first()

# def Lister_commandes_marchand(
#     db: Session = Depends(get_db),
#     utilisateur = Depends(recuperer_utilisateur_courant)
# ):
#     marchand = marchand_service.obtenir_marchand_par_utilisateur(db, utilisateur.id)

#     if not marchand:
#         raise HTTPException(status_code=404, detail="Aucun marchand trouv√© pour cet utilisateur.")

#     return marchand_service.recevoir_commandes(db, marchand.id)

def recevoir_commandes(db: Session, marchand_id: UUID):
    return db.query(Commande).filter(Commande.marchand_id == marchand_id).all()

def accepter_commande(db: Session, commande_id: UUID):
    commande = db.query(Commande).filter(Commande.id == commande_id).first()
    if commande:
        commande.statut = "valid√©e"
        db.commit()
        
        # üîî Client
        notif_client = NotificationCreate(
            user_id=commande.client_id,
            user_type="client",
            titre="Commande accept√©e",
            message="Votre commande a √©t√© valid√©e par le marchand.",
            type=TypeNotification.success
        )
        creer_notification(db, notif_client)

        # üîî Marchand
        notif_marchand = NotificationCreate(
            user_id=commande.marchand.utilisateur_id,
            user_type="marchand",
            titre="Commande valid√©e",
            message="Vous avez valid√© une commande.",
            type=TypeNotification.info
        )
        creer_notification(db, notif_marchand)
        return {
            "message": "Commande valid√©e avec succ√®s",
            # commande
        }
    raise HTTPException(status_code=404, detail="Commande non trouv√©e")

# def lancer_livraison(db: Session, commande_id: UUID):
#     commande = db.query(Commande).filter(Commande.id == commande_id).first()
#     if commande:
#         commande.statut = "en_cours"  
#         db.commit()
#         db.refresh(commande)
#         return {
#             "message": "Livraison lanc√©e avec succ√®s",
#             "commande": commande
#         }
#     raise HTTPException(status_code=404, detail="Commande non trouv√©e")
def lancer_livraison(db: Session, commande_id: UUID):
    commande = db.query(Commande).filter(Commande.id == commande_id).first()
    if not commande:
        raise HTTPException(status_code=404, detail="Commande non trouv√©e")

    # 1. Mettre √† jour le statut de la commande
    commande.statut = "en_cours"
    db.commit()
    db.refresh(commande)

    # 2. Cr√©er une livraison li√©e, sans livreur_id
    nouvelle_livraison = Livraison(
        commande_id=commande_id,
        statut="en_attente",
        livreur_id=None  # pas encore affect√©
    )
    db.add(nouvelle_livraison)
    db.commit()
    db.refresh(nouvelle_livraison)
    
    # üîî Client
    notif_client = NotificationCreate(
        user_id=commande.client_id,
        user_type="client",
        titre="Livraison en cours",
        message="La livraison de votre commande a √©t√© lanc√©e.",
        type=TypeNotification.info
    )
    creer_notification(db, notif_client)

    # üîî Marchand
    notif_marchand = NotificationCreate(
        user_id=commande.marchand.utilisateur_id,
        user_type="marchand",
        titre="Livraison lanc√©e",
        message="Une nouvelle livraison a √©t√© lanc√©e avec succ√®s.",
        type=TypeNotification.success
    )
    creer_notification(db, notif_marchand)

    # üîî Tous les livreurs ‚Üí notification de disponibilit√©
    livreurs = db.query(Livreur).all()
    for livreur in livreurs:
        notif_livreur = NotificationCreate(
            user_id=livreur.id,
            user_type="livreur",
            titre="Nouvelle livraison disponible",
            message="Une nouvelle livraison est en attente d‚Äôacceptation.",
            type=TypeNotification.info
        )
        creer_notification(db, notif_livreur)

    return {
        "message": "Livraison lanc√©e avec succ√®s",
        "commande": CommandeRead.from_orm(commande),
        "livraison": nouvelle_livraison
    }

def annuler_livraison(db: Session, commande_id: UUID):
    commande = db.query(Commande).filter(Commande.id == commande_id).first()
    if commande:
        commande.statut = "annul√©e"
        db.commit()
        db.refresh(commande)
        
        # üîî Client
        notif_client = NotificationCreate(
            user_id=commande.client_id,
            user_type="client",
            titre="Commande annul√©e",
            message="Votre commande a √©t√© annul√©e par le marchand.",
            type=TypeNotification.warning
        )
        creer_notification(db, notif_client)

        # üîî Marchand
        notif_marchand = NotificationCreate(
            user_id=commande.marchand.utilisateur_id,
            user_type="marchand",
            titre="Annulation confirm√©e",
            message="L‚Äôannulation de la commande a bien √©t√© prise en compte.",
            type=TypeNotification.info
        )
        creer_notification(db, notif_marchand)
        return {
            "message": "Commande annul√©e avec succ√®s",
            "commande": commande
        }
    raise HTTPException(status_code=404, detail="Commande non trouv√©e")


def voir_details_commande(db: Session, commande_id: UUID):
    return db.query(Commande).filter(Commande.id == commande_id).first()

# def voir_livraisons_par_statut(db: Session, marchand_id: UUID, statut: str):
#     return db.query(Commande).filter(Commande.marchand_id == marchand_id, Commande.statut == statut).all()

# def voir_livraisons_par_statut(db: Session, marchand_id: UUID, statut: str):
#     return db.query(Commande).filter(
#         Commande.marchand_id == marchand_id,
#         Commande.statut == statut
#     ).all()


# def rechercher_livraisons(db: Session, marchand_id: UUID, critere: str):
#     return db.query(Commande).filter(Commande.marchand_id == marchand_id, Commande.description.ilike(f"%{critere}%")).all()

def voir_statistiques_livraisons(db: Session, marchand_id: UUID):
    total = db.query(Commande).filter(Commande.marchand_id == marchand_id).count()

    en_attente = db.query(Commande).filter(
        Commande.marchand_id == marchand_id,
        Commande.statut == StatutCommande.EN_ATTENTE
    ).count()

    validee = db.query(Commande).filter(
        Commande.marchand_id == marchand_id,
        Commande.statut == StatutCommande.VALIDEE
    ).count()

    annulee = db.query(Commande).filter(
        Commande.marchand_id == marchand_id,
        Commande.statut == StatutCommande.ANNULEE
    ).count()

    en_cours = db.query(Commande).filter(
        Commande.marchand_id == marchand_id,
        Commande.statut == StatutCommande.EN_COURS
    ).count()

    livree = db.query(Commande).filter(
        Commande.marchand_id == marchand_id,
        Commande.statut == StatutCommande.LIVREE
    ).count()

    return {
        "total": total,
        "en_attente": en_attente,
        "valid√©e": validee,
        "annul√©e": annulee,
        "en_cours": en_cours,
        "livr√©e": livree
    }
    
    
   

def ajouter_adresse(db: Session, marchand_id: UUID, nouvelle_adresse: str):
    marchand = db.query(Marchand).filter(Marchand.id == marchand_id).first()
    if not marchand:
        raise HTTPException(status_code=404, detail="Marchand non trouv√©")
    marchand.adresse = nouvelle_adresse
    db.commit()
    db.refresh(marchand)
    return marchand
